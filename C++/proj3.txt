SIZE .INT 7
CNT .INT 0
TENTH .INT 0
ZERO .INT 0
ONE .INT 1
NILL .BYT 48
C .BYT 'H'
.BYT 'E'
.BYT 'L'
.BYT 'L'
.BYT 'O'
.BYT 'W'
.BYT 10
DATA .INT 0
FLAG .INT 0
OPDV .INT 0
S .BYT 'S'
T .BYT 'T'
A .BYT 'A'
c .BYT 'C'
K .BYT 'K'
O .BYT 'O'
V .BYT 'V'
E .BYT 'E'
R .BYT 'R'
F .BYT 'F'
L .BYT 'L'
W .BYT 'W'
NL .BYT 10


START       ; Call reset function
            ; TEST FOR OVERFLOW
            MOV R5, SP      ; Test for overflow
            ADI R5, -20     ; Allocate for 4 int parameters plus RA and PFP
            CMP R5, SL
            BLT R5, OVERFLOW
            ; CREATE ACTIVATION RECORD FOR RESET
            MOV R3, FP  ; SAVE FOR PFP
            MOV FP, SP  ; FP = SP
            ADI SP, -4  ; MOVE SP UP TO ADD RA
            STR R3, SP  ; PUT PFP AT LOCATION FP - 4
            ADI SP, -4  ; MOVE SP TO PASS A 1
            LDR R3, ONE
            STR R3, SP  ; PUT 1 AT FP - 8
            ADI SP, -4  ; MOVE SP TO PASS A 0
            LDR R3, ZERO
            STR R3, SP  ; PUT 0 AT FP - 12
            ADI SP, -4  ; MOVE SP TO PASS A 0
            STR R3, SP  ; PUT 0 AT FP - 16
            ADI SP, -4  ; MOVE SP TO PASS A 0
            STR R3, SP  ; PUT 0 AT FP - 20
            MOV R1, PC  ; PUT PC IN R1
            ADI R1, 36  ; CALC RETURN ADDRESS
            STR R1, FP  ; PUT PC AT LOCATION FP
            JMP RESET   ; JUMP TO RESET
            ; CALL GETDATA()
            ; TEST FOR OVERFLOW
            MOV R5, SP
            ADI R5, -4
            CMP R5, SL
            BLT R5, OVERFLOW
            ; CREAT ACTIVATION RECORD FOR GETDATA()
            MOV R3, FP  ; SAVE FOR PFP
            MOV FP, SP  ; FP = SP
            ADI SP, -4  ; MOVE SP UP TO ADD RA
            STR R3, SP  ; PUT PFP AT LOCATION FP - 4
            MOV R1, PC
            ADI R1, 36
            STR R1, FP
            JMP GETDATA
            JMP END

OPD         ; 3 variables char s, int k, char j
RESET       ; DECLARE INT K
            MOV R5, SP  ; TEST FOR OVERFLOW
            ADI R5, -4
            CMP R5, SL
            BLT R5, OVERFLOW
            ADI SP, -4  ; ALLOCATE SPACE ON FP FOR INT K
            LDR R3, ZERO
            STR R3, SP
FORR        LDR R5, SP
            LDR R4, SIZE    ; COMPARE K WITH SIZE
            CMP R5, R4
            BRZ R5, ENDFORR
            LDA R2, C
            LDR R1, SP
            ADD R2, R1      ; ADD K WITH ADDRESS OF C
            LDB R3, NILL
            STB R3, R2      ; ASSIGN CONTENTS OF R2 TO '0'
            LDB R3, R2      ; DEBUG OUT PUT  ********************************
            TRP 3
            ADI R1, 1       ; INCREMENT K
            STR R1, SP
            JMP FORR
ENDFORR     MOV R1, FP      ; ASSIGN DATA TO W
            ADI R1, -8
            LDR R2, DATA
            STR R1, R2
            MOV R1, FP      ; ASSIGN OPDV TO X
            ADI R1, -12
            LDR R2, OPDV
            STR R1, R2
            MOV R1, FP      ; ASSIGN CNT TO Y
            ADI R1, -16
            LDR R2, CNT
            STR R1, R2
            MOV R1, FP      ; ASSIGN FLAG TO Z
            ADI R1, -20
            LDR R2, FLAG
            STR R1, R2
            LDB R3, NL      ; DEBUG OUTPUT ********************************
            TRP 3
            MOV SP, FP      ; SP = FP
            MOV R5, SP     ; TEST FOR UNDERFLOW
            CMP R5, SB
            BGT R5, UNDERFLOW
            MOV R1, FP      ; FP = PFP
            ADI R1, -4
            LDR R2, R1
            MOV FP, R2
            LDR R5, FP      ; RETURN TO MAIN
            JMR R5

GETDATA     LDR CNT, R4     ; if cnt < size
            LDR SIZE, R5
            CMP R5, R4
            BRZ R5, ELSEGD
            TRP 4           ; C[CNT] = GETCHAR()
            LDA R1, C
            LDR R2, CNT
            ADD R1, R2
            STB R3, R1
            ; INCREMENT CNT
            JMP ENDGD
ELSEGD      ; PRINT "NUMBER TOO BIG\N"
            ; CALL FLUSH
            ;
            MOV SP, FP      ; SP = FP
            MOV R5, SP      ; TEST FOR UNDEFLOW
            CMP R5, SB
            BGT R5, UNDERFLOW
            MOV R1, FP      ; FP = PFP
            ADI R1, -4
            LDR R2, R1
            MOV FP, R2
            LDR R5, FP      ; RETURN TO CALL
            JMR R5

UNDERFLOW   LDB R3, F
            TRP 3
            LDB R3, L
            TRP 3
            LDB R3, O
            TRP 3
            LDB R3, W
            TRP 3
            LDB R3, NL
            TRP 3
            TRP 3
            JMP END
OVERFLOW    LDB R3, S
            TRP 3
            LDB R3, T
            TRP 3
            LDB R3, A
            TRP 3
            LDB R3, c
            TRP 3
            LDB R3, K
            TRP 3
            LDB R3, O
            TRP 3
            LDB R3, V
            TRP 3
            LDB R3, E
            TRP 3
            LDB R3, R
            TRP 3
            LDB R3, F
            TRP 3
            LDB R3, L
            TRP 3
            LDB R3, O
            TRP 3
            LDB R3, W
            TRP 3
            LDB R3, NL
            TRP 3
            TRP 3
            JMP END
END         LDB R3, NL
            TRP 3
            TRP 3
