; int SIZE = 10;
; int ARR[] = { 10, 2, 3, 4, 15, -6, 7, 8, 9, 10 };
; int i = 0;
; int sum = 0;
; int temp;
; int result;
; while (i < SIZE) {
;   sum += ARR[i];
;   result = ARR[i] % 2; \\ Do this using simple algebra
;   if (result == 0)
;       printf("%d is even\n", ARR[i]);
;   else
;       printf("%d is odd\n", ARR[i]);
;   i++;
; }
;   printf("Sum is %d\n", sum);

SIZE .INT 10
ARR .INT 10, 2, 3, 55, 15, -6, 7, 8, 9, 10
I .INT 0
SUM .INT 0
TEMP .INT 0
RESULT .INT 0
INTEGER .INT 4
EVEN .INT 2
S .BYT 'S'
u .BYT 'u'
m .BYT 'm'
SPACE .BYT 32
i .BYT 'i'
s .BYT 's'
e .BYT 'e'
v .BYT 'v'
n .BYT 'n'
o .BYT 'o'
d .BYT 'd'
NL .BYT 10
WHILE       LDR R1, I
            LDR R2, SIZE
            CMP R1, R2
            BRZ R1, ENDWHILE
            LDR R1, SUM
            LDA R2, ARR         ; Put array address into r9
            LDR R3, I           ; Put index value into r3
            LDR R4, INTEGER
            MUL R3, R4
            ADD R2, R3          ; add index value to address to get specifc array value
            LDR R6, R2
            ADD R1, R6
            STR R1, SUM
            STR R6, RESULT
            LDR R7, EVEN        ; see if current value is even or odd
            DIV R6, R7
            MUL R6, R7
            LDR R7, RESULT      ; See if r6 is equal to result
            CMP R6, R7
            BNZ R6, ELSE
            MOV R3, R7          ; Print out even
            TRP 1
            LDB R3, SPACE
            TRP 3
            LDB R3, i
            TRP 3
            LDB R3, s
            TRP 3
            LDB R3, SPACE
            TRP 3
            LDB R3, e
            TRP 3
            LDB R3, v
            TRP 3
            LDB R3, e
            TRP 3
            LDB R3, n
            TRP 3
            LDB R3, NL
            TRP 3
            JMP ENDELSE
ELSE        MOV R3, R7          ; Print out odd
            TRP 1
            LDB R3, SPACE
            TRP 3
            LDB R3, i
            TRP 3
            LDB R3, s
            TRP 3
            LDB R3, SPACE
            TRP 3
            LDB R3, o
            TRP 3
            LDB R3, d
            TRP 3
            TRP 3
            LDB R3, NL
            TRP 3
ENDELSE     LDR R3, I           ; Increment I
            ADI R3, 1
            STR R3, I
            JMP WHILE
ENDWHILE    MOV R3, R2
            LDB R3, S
            TRP 3
            LDB R3, u
            TRP 3
            LDB R3, m
            TRP 3
            LDB R3, SPACE
            TRP 3
            LDB R3, i
            TRP 3
            LDB R3, s
            TRP 3
            LDB R3, SPACE
            TRP 3
            LDR R3, SUM
            TRP 1
            LDB R3, NL
            TRP 3
            TRP 0
