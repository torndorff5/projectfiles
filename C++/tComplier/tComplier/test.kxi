class Apple {
private void VoidF() { }
private int IntF() { }
private char CharF() { }
private bool BoolF() { }
private Apple AppleF() { }

//private void VoidV;
private int IntV;
private char CharV;
private bool BoolV;
private Apple AppleV;

//private void VoidA[];
private int IntA[];
private char CharA[];
private bool BoolA[];
private Apple AppleA[];
}

class Banana {
Banana()
{
}
}

class Cherry {
Cherry(int IntP, int IntAP[])
{
}
}

class Dragonfruit {
Dragonfruit(Apple apple)
{
}
}

class Elderberry {
Elderberry(Banana banana)
{
}
}

class Fig {
Fig(int IntA[])
{
}
}

class Grape {
private void Arid() { }
private int Blue(int a) { }
private int Clear(bool b) { }
private int Drunk(char c) { }
//private int Elated(void v) { }
private Fig Fun() { }
private char Gone(bool b[]) { }
private Banana Hero(Fig f) { }

private int Intense() {
//void arid = Arid();
int blue = Blue(42);
int blue2 = Blue(blue);
int clear = Clear('a' < 'b');
int clear2 = Clear(5 != 5);
int clear3 = Clear(blue >= blue2);
int clear4 = Clear(blue <= blue && true);
int clear5 = Clear(true);
//int clear6 = Clear(null);

char c = 'a';

int drunk = Drunk('a');
int drunk2 = Drunk(c);

Fig fig = Fun();

Banana banana2 = Hero(fig);
Banana banana3 = Hero(Fun());

Grape grape = this;
//Banana banana = this;

//Grape grape2 = new Banana();

//new Apple();
//new Banana();

//this = null;
//null = this;

//1 + 2 = 3;
3 + 4 == 5;
6 < 7 && true;
true;
false;
null;
this;
}

private int Jaded() {
int a;
bool b;
char c;

a = 1;
a = 2 + 3;
a = 4 + 5 * 6;
a = 4 + 5 * 6 / 7;
a = -1;
a = +1;
a = -1 -1;
a = -1 - -1;
a = -1--1;
a = +1++1;
a = 1+1-1;
a = +1++1+1++1/+1++2+-3-3--4;
b = true;
//b = null;
//b = this;
b = '5' < '6';
//b = a < 7 || b > 9;
b = a < 7 && a >= 9;

//true = false;
//Grape = null;
//Grape = this;
//Grape = new Grape();
}
}

class One
{
private int a = -1;
private int b = 2;
//private int b = (-1 + 2);
//private bool b = true;
// TODO
// private char c = null;
//private One d = new One('a', '\n', true);

public char e;
public int f;
public bool g;
public One h;

private int i(int a) { }

public void j(bool cat)
{
int dog = 12 + -12;
int arr[];
}

One(One arr[], char c)
{
int local1 = 5 + 1;
char local2 = '\n';
bool local3 = false;
}

//One() { }
// One(int a) { }
}

class Two
{
// TODO
// private int a[] = -1;
private bool b = true;
private char c[] = null;
//private One d = new One('a', '\n', true);

public char e;
//public int f[] = new Two(1, 2, 3);
//public bool g = new bool[((5 && 21 + (9 - 3) / 4) * 7)];
//public One h = atoi(55);
//public Cat h = itoa('\n' - null + true || false && null);

public int foo(int a, int b, char c, bool d) { }

private bool RetBool() { }

private int cat;

private int i(int a, int cat)
{
int x;
int y;
int z;
{
x + y;
{
a = 5 * 509 + 9 - 10 + 9 -12 * (12 * (12));
//foo(5 * (4 + 2), 9, 'a', true).bar[5 + 1];
{
//x + y * z / a - b * c;

//x = x + y; z = atoi(x + a + c);
}
//r = itoa(x + a);
}
a = 5;
//a = -5 + '5' + +12 / 2 - 'a' + '\n';
}    a = (a + 5 + 6);

a = 5 + (+6 - 1 / +1 - -1);

//this.cat(2 + 2 == 5).dog[true].fish(null);

//c + 9;
//9 = a < 5 || true || null || false && true * 1;
b = a < 5 || true || this.RetBool() || false && true;
b = a < 5 || true || RetBool() || false;


//    if (this.cat == cat || this != null)
//    {
//        foo(0, 1, 2).cow();
//}
//    else

//        this.dog.fit[12 * 12 + 12 ++12] == 12;


//    if (Null) { } else { }

while (true)
while (true)
{
if (true || false || true)
5 + 5;

a = 5;
}
}

public void j(bool cat)
{
int dog = 12 + -12;
int arr3[];
One arr4[] = new One[50];

Two two = new Two(arr4, 'a');

two = this;

//if (this == null) { }

//if (this == two) { }
}

Two(One arr3[], char c)
{
int local1 = 5 + 1;
char local2 = '\n';
bool local3 = false;
}
}

class Bar {
Bar(int a, bool b){}
public Bar c(int a, bool b){}
public int foo(){}
public int a;
}

class A {
public int a;
private char c;
private bool b;
public int arr[];
private char arr4[];
public bool arr3[];
public Bar bar;
public Bar barArr[];

public int funcA() { }
public bool funcB(int a) { }
public Foo funcC(int a, char c) { }
public Bar funcD(int a, char c, bool b) { }
public void funcE(char c, int a) { }

private int funcA2() { }
private bool funcB2(int a[]) { }
private Foo funcC2(int a, char c[]) { }
private Bar funcD2(int a, char c[], bool b) { }
private void funcE2(char c[], int a[]) { }

A() {
bool b; char c; A d;

f();
g(1);
h(2, true);
i(3, false, 'a');
j(true, 4);
k('c', false, 5);
g(a);
h(a, b);
i(a, b, c);
j(b, a);
k(c, b, a);
h(a, true);
i(a, false, c);
j(true, a);
k(c, false, a);
h(6, b);
i(7, true, 'd');
j(false, 8);

a = fint() + fint();
a = gint(1);
a = hint(2, true);
a = iint(3, false, 'a');
a = jint(true, 4);
a = kint('c', false, 5);
a = fint();

return this;
}

public void f() {}
private void g(int a) {}
public void h(int a, bool b) {}
private void i(int a, bool b, char c) {}
public void j(bool b, int a) {}
private void k(char c, bool b, int a) {}
private int fint() {}
public int gint(int a) {}
private int hint(int a, bool b) {}
public int iint(int a, bool b, char c) {}
private int jint(bool b, int a) {}
public int kint(char c, bool b, int a) {}
public int rInt() { }
public void foo(int a)
{
int c = 16;
int d = 17;
int f = -9;
int g = -8;
foo(-2);
foo(2);
foo(+2);
foo3(a);
foo2(rInt());
foo(a + rInt());
foo(rInt() * foo2(rInt()) - 2 / rInt());
foo2(-2 - -2);
foo(2 / 2);
foo(+2 + +2);
foo(a * -1);
foo(rInt() * -2);
foo((a + rInt()) * 5);
foo(a * (5 + (5 + 3) - 2) / rInt());
foo3(9 * (8 / ( 7 + ( 6 - ((5) + 4) - 3) * 2) / 1));
foo3(9 * (rInt() + (c + 3) - 2) / rInt());
foo2(9 * (f / ( 7 + ( foo2(foo2(2)) - ((5) + g) - 3) * c) / 1));
}
public int foo2(int c){}
private void foo3(int h2){}
public void foo5() {}

}

class aClass{
public int iitest() {
return 2;
}

public void vtest() {
int a;
return;
}

public int a;
public char cfunc(){}
public int ifunc(){}
public int ifunc2(int a, int b, char c){}
public int ifunc3(int a){}
private int iss[];
public void vfunc(){}
public bool bfunc(){}
public bool bss[];

public char ctest() {
return '2';
return '\n';
return '2';
}

public int itest() {
return 2;
return 2+2-1354736485/1265273654672*234234;
return ifunc();
return ifunc() + 2;
return iss[2];
return ifunc() + 2-4+8379653984756/123*412 + iss[2] - ifunc() + 2-4+8379653984756/123*412 + iss[2];
return ifunc3(iss[0]);
return ifunc3(ifunc() - ifunc() - 3);
return ifunc2(2, ifunc() / 23, 'a');
return ifunc2(2*1, ifunc() /23 - iss[ifunc()] + iss[3 * ifunc()], '3');
}

public bool btest() {
// bool tests
return true;
return false;
return bfunc();
return bfunc() || bfunc();
return true || bfunc() && false;
return bfunc() && bfunc();
return bss[0];
return bss[0] && true || false;
return bss[0] && true || false && bfunc() || bfunc();

// char tests

//  int tests
return ifunc() == ifunc() && true || true && false || false && bss[0];
return ifunc() != ifunc() && true || true && false || false && bss[0];
return ifunc() <= ifunc() && true || true && false || false && bss[0];
return ifunc() >= ifunc() && true || true && false || false && bss[0];
return ifunc() <  ifunc() && true || true && false || false && bss[0];
return ifunc() >  ifunc() && true || true && false || false && bss[0];
return 3 == ifunc() && true || true && false || false && bss[0];
return 3 != ifunc() && true || true && false || false && bss[0];
return 3 <= ifunc() && true || true && false || false && bss[0];
return 3 >= ifunc() && true || true && false || false && bss[0];
return 3 <  ifunc() && true || true && false || false && bss[0];
return 3 >  ifunc() && true || true && false || false && bss[0];
return ifunc() == 3 && true || true && false || false && bss[0];
return ifunc() != 3 && true || true && false || false && bss[0];
return ifunc() <= 3 && true || true && false || false && bss[0];
return ifunc() >= 3 && true || true && false || false && bss[0];
return ifunc() <  3 && true || true && false || false && bss[0];
return ifunc() >  3 && true || true && false || false && bss[0];
}
}
class Mouse{
private char noise = 's';
public int age;
public int size = 11;
public void squeak(){
cout << 's';
cout << 'q';
cout << 'u';
cout << 'e';
cout << 'a';
cout << 'k';
return;
}
Mouse(){
int i;
int ii[];
}

private int Mouse2(int r, int l){

}
}
class Dog2{
public int age = 10;
private bool chasing = false;
public char name = 'b';
public bool chase(int e, char q){
}
public char sayName(){
return name;
}

Dog2(bool c, int q, char t){
this.chasing = c;
this.age = q;
this.name = t;
}
}
class Catn{
public bool bob = false;
private int r;
private char yes = 'y';
private bool running = false;
public int whiskers[];
public bool chase(int msize){
if(msize < 10){
return true;
}
else{
return false;
}
}
public bool run(int e, char q){
}
Catn(int r, char yes){
this.yes = yes;
this.r = r;
}
}
//class arr2{
//  public arr arr2[];
//  public int gifunc(){}

//  arr2(){}
//}

class scopeClass1{
public int scopea;
public int scopeb;
public char scopec;
private int scopeap;
private int scopebp;

scopeClass1(int scopea, char scopeb, bool scopec) {
this.scopea = scopea;
// this.scopeb = atoi(scopeb); //atoi no longer needed
}
}

class atoiCat{
public char cfunc(){}
public char carr[];
public int ifunc(){}
public int iarr[];

//  public char ca = itoa(90+3); // itoa no longer needed
// public char ca2 = itoa(iarr[3]);
// public char ca3 = itoa(90+2-iarr[3]/ifunc());
// public char ca4 = itoa(ifunc());
// public int ia1 = atoi('x');
// public int ia2 = atoi('\x');
// public int ia3 = atoi(cfunc());
// public int ia4 = atoi(carr[3]);

public void testerson() {
atoiCat2 asdf;
//   char s = itoa(asdf.ifunc());
}
}

class atoiCat2{
public int ifunc(){}
}
class Dog{
public bool slobber = false;
private int teeth;

Dog(int t, bool s) {
this.teeth = t;
this.slobber = s;
}

public int f(int as, int as2) {
return 3 / as + as2 - 5;
}
}

class chainTest {
private innerChain ss;
public innerChain f() {
return ss;
}
}

class innerChain {
public innerChain2 sss;
public innerChain2 g() {
return sss;
}
}

class innerChain2 {
public int y;
}

class nomemeberClass{}
class Cat2{
public char lives = 'a'; // itoa(90+2);
public int lives2 = 1; // atoi('1');
public int xs[];
public int x = 2;
public int y;
private Cat parent = null;
private int r;
private int k;
private int g;
private int d;
private char da;

public int w(int fd, char a) {
int i;
int ii[];
char df = 'f';
Cat2 as = new Cat2('a');

// ii = i;
// i[7] = ii;
// 4 = 3;
// null = null;

if (4<3 && false) {
this.x = 3;
ii = new int[4];
i = ii[123];
}
return 3+3;
}

private char w2(int d, Cat ds) {
this.lives = da;
this.lives = this.da;
this.parent = ds;
parent = parent;
f(r*3, g<k);
}

public void fa() {}

public void f(int one, bool two) {}

Cat2(char x){
int a = this.w(2, 'a');
int as[] = xs;
int b = xs[3];
fa();
f(2, false);
}
}
class Cat{
public char fjfjf = 'k';
public int shark;
public int sharks[];
public int yoda;
public char sweetDee;
public bool tomHanks;
private int darth;

Cat(bool x){}
public int useForce(char x[]){
int i;
int ii[];
//i = ii;
// ii = i;
// i[7] = i;
// true = false;
// 1 = 2;

sweetDee = x[1];
if(yoda < 5){
yoda = yoda + darth;
}
return this.yoda;
}

private bool isTrue(){
return tomHanks;
}

public int getTest(int a, char b[], bool c){
int x = 5;
char k;
bool z;
if(z){
this.shark = (x + 1);
shark = (x + 1);
}
return x;
}

public int bet2(){
return 3 +3-2/4*4;
}

public void bet(){
return;
}
}
class Fib{
private int fibo;
Fib(int x){
fibo = calcFib(x);
}
private int calcFib(int n){
if(n < 2){
return n;
}
return calcFib(n - 1) + calcFib(n - 2);
}
public int getFib(){
return fibo;
}
}

class Fact{
public int fact;
Fact(int x){

fact = calcFact(x);
}
private int calcFact(int n){
if(n < 2){
return n;
}
return n * calcFact(n-1);
}
}

class Convert{
Convert(){}
public char toAscii(int n){
char temp =  'n'; // itoa(n);
return temp;
}
public char getNextAscii(int n){
char next = 'm' ; // itoa(n+1);
return next;
}
}

class Foo {
Foo() {
}
public int iArr[];
private Foo bArr[];

public int foo2[];

//private void func(int a, void b0) {
private void func(int a, int b2) {
int c = 5;
int b[];
b[5] = a;

iArr[5] = iArr[iArr[5] + 10 + foo()];

return;
}

public int foo() {

int i;
int ii[];
int a = i;
//this = null;
//1 = 2;

int i2[];
int i3[];

// i();
func(5, 5);

i2[3] = i3[i3[i3[i * i - 2 + 5]]];

ii[2 + 5] = 5 + i;

return iArr[5] + iArr[2];
}
}

class SmoothOperator {
SmoothOperator()
{
int a;
bool b;
char c;

a = 1;
a = 1 + 1;
a = 1 - 1;
a = 1 * 1;
a = 1 / 1;
b = 1 < 1;
b = 1 > 1;
b = 1 <= 1;
b = 1 >= 1;
b = 1 != 1;
b = 1 == 1;
b = true;
b = true || false;
b = true && false;
b = true && false || true;
}
}

class SuperbFunction {
public int a;
private int b;
public int c[];
private int d[];
public int e() { }
private int f() { }

public void names(int a, int b, int c[], int d[]) {
a = this.a;
this.a = a;
a = a;
b = this.b;
this.b = b;
b = b;
c = this.c;
this.c = c;
c = c;
d = this.d;
this.d = d;
d = d;
a = c[0];
a = this.c[0];
c[0] = this.c[0];
this.c[0] = c[0];
c[0] = c[1];
c[0] = c[0];
d[0] = this.d[0];
this.d[0] = d[0];
d[0] = d[0];
d[1] = d[1];
a = this.d[0] + d[0];
b = d[0] + this.d[0];
this.a = this.d[0] + d[0];
this.a = this.d[0] + this.d[5 + 5 + 5 + 5];
//this.b = this.d[0] + this.d;
//b = b[0];
//b = this.b[0];
//b();
//this.b();
//a = b();
//a = this.b();
//b = b();
//b = this.b();
//this.a = b();
//this.a = this.b();
//this.b = b();
//this.b() = this.b();

}

public int no() {
SuperbFunction sf;

//b();
//sf.b();
//this.b();
}

public int maybe(int a) { }

public int yes() {
int a = this.yes();
int b = yes();
int arr[] = null;
//no() = 5;
//this.no() = no();
//this.no() = yes();
//this.no() = this.yes();
//this.no() = this.no();

arr = new int[yes()];
arr = new int[maybe(5)];
arr = new int[maybe(90)];
arr = new int[no()];
b = this.no();
a = no();

}
}

class StupidExpr
{
private int a;
private int b;
private int c[];
private int d[];
private int foo() { }
private int arr[];
public void func(int c[]) {
this.c[0] = -0-a*-1+-1/arr[0]+-1+-1/a/-0+arr[0]/arr[0]-a++0/foo()+-0-a;
this.c[0] = arr[0]*foo()/arr[0]/1/a-foo()-a++1*+1-a+arr[0]+0+-1*+1*-0--1;
this.b = arr[0]-foo()+-0*-0/-0-+1/foo()-a/-0-+1-0--1/+0+-1--0+-1;
a = 0*-1++0*-0*0/a+-0/-0/-0/foo()/+0+0-a*+0/a-+0;
this.b = -0/0/arr[0]*-1+1/arr[0]/a++1-+1*0/a+-0*0-arr[0]-+1/1;
c[0] = +1--1/foo()/+1-0*-0*+1*+1-a++1*a/-1++1+arr[0]+1-arr[0];
d[0] = -0/1-foo()/a-0+a*-1--0++1*-1/arr[0]+a+-0/a-+0++1;
this.c[0] = a++1+arr[0]/+1*1-0--0*-1++1*a/-1+1+0/+1+a*a;
this.b = 1++1/a/foo()++0-foo()-arr[0]-a+-1/foo()/1/+0/-1*-0++0--1;
a = +1*arr[0]*1+a*+0-+0*-0+-1/-0*+0/arr[0]+1*+1--1/0+0;
a = c[0*-1++0*-0*0/a+-0/-0/-0/foo()/+0+0-a*+0/a-+0];
this.b = c[-0/0/arr[0]*-1+1/arr[0]/a++1-+1*0/a+-0*0-arr[0]-+1/1];
d[0] = c[foo()+a*0/-1/0--1*1--1/-0*-0-1--1++1/0+-0*0];
d[0] = c[-1/+1/-0/+0*1*-0/-1-1/+1+a/+1/-1+-1-foo()+foo()*0];
this.b = c[0/0/arr[0]*+1*+1+-1++0-arr[0]/0-+1-+1-a+1*arr[0]/foo()*0];
d[0] = c[+0-a+foo()/-1/-1*+1+-0++0*-1/1/0-a--1+1--0--1];
c[0] = c[foo()/0+foo()*-0/+1-1/1+-1/foo()++1+arr[0]++1*1-foo()+-1-+1];
c[0] = c[1+0-foo()-foo()/+0+1/0*arr[0]-1*+1+foo()-a+0+foo()*-0/foo()];
}
}

void kxi2019 main() {

//void VoidV;
int IntV;
char CharV;
bool BoolV;
Apple AppleV;

//void VoidA[];
int IntA[];
char CharA[];
bool BoolA[];
Apple AppleA[];

//int IntA2[] = new int[-12];
//int IntA3[] = new int[0];
int IntA4[] = new int[12];

Apple AppleA2[] = new Apple[50];

//Banana Banana;
//int int;
//int Banana;
//Apple Banana;
//Apple int;
//Apple void;
//void Apple;

//int IntAA[][] = new Int[50][20];
//void VoidAA[][] = null;
//Apple AppleAA[][] = new Apple[5];

//int;
//void;
//Apple;

//int 5;
//int -5;
//int +5;
//int 0;
//int null;
//int true;
//int this;

//Apple AppleI = new Apple();
Banana BananaI = new Banana();
//Cherry CherryI = new Cherry();
//**Cherry CherryI = new Cherry(50, null);
Cherry CherryI2 = new Cherry(50, IntA);
Cherry CherryI3 = new Cherry(50 + 50, IntA);
Cherry CherryI4 = new Cherry(IntV, IntA);
Cherry CherryI5 = new Cherry(IntA[50], IntA);
//Cherry CherryI6 = new Cherry(IntA[IntV + 50 * IntA[1]], CharA);
Cherry CherryI6 = new Cherry(IntA[IntV + 50 * IntA[1]], IntA);
//Cherry CherryI7 = new Cherry(IntA[IntV + 50 * IntA[1]], IntA[50]);
//Cherry CherryI8 = new Cherry(IntA[IntV + 50 * IntA[1]], IntA[50 + IntV]);
Dragonfruit DragonfruitI = new Dragonfruit(AppleV);
//Dragonfruit DragonfruitI2 = new Dragonfruit(null);

Elderberry ElderberryI = new Elderberry(BananaI);
//**Elderberry ElderberryI2 = new Elderberry(BananaI = new Banana());

//Fig FigI = new Fig();
//Fig FigI2 = new Fig(IntA = new int[5]);
Fig FigI3 = new Fig(IntA);
//Fig FigI4 = new Fig(IntA[2]);
//Fig FigI5 = new Fig(null);


bool ai = 5 < 5;
bool ci = '5' < '5';
bool cc = 5 > 55;
int r = 5; // atoi('c');
char q = '5'; // itoa(5);

int u = foo.iArr[0];

int s = 1; // atoi(q);
char t = 'r'; // itoa(r);

Foo foo = new Foo();
Bar bar = new Bar(1 + 2, 3 < 4);
A arr[] = new A[foo.iArr[0]];

int i = 9 + 10;
int a = 10;
Bar b[] = null;
bool c[] = new bool[s + r];
Bar dd = null;
int ee[] = null;


true;
false;
//this;
null;

'5';
'\n';
5;
+5;
-5;
+0;
0;

//6 = 5;
//5 = 5;
//true = true;
//false = true;
//null = true;
//true = null;
//this = false;
//this = new Banana();

//IntV = null;
AppleV = null;

IntA = null;
AppleA = null;

IntA = IntA4;

//IntA = CharA;
//IntA[5] = null;
AppleA[5] = null;

AppleA = AppleA2;

//Apple = new Apple();
//Apple = null;
//Apple = new Apple[50];

//Apple[9] = Apple[1];
//AppleA[2] = Apple;
AppleA[0] = AppleV;
AppleA[3] = AppleA2[5];
//AppleA[0] = AppleA2;

//Apple = AppleA[2];
//new Apple() = Apple;
//null = Apple;
//new Apple[50] = Apple;

//AppleV = new Apple();
AppleA = new Apple[3];
//AppleV = new Apple[2];
//AppleA = new Apple();

//IntV[5];
//IntV();
//IntV(5, IntV + IntV);
//IntV(CharV);

//AppleV();
//AppleV[3];
//AppleV(5);
//AppleV(2, 5 + 5);

//AppleA[5][10];
//AppleA[5] = AppleA[50][10];


c[b[1].c(1, c[2]).foo() * a / 2 - 1] =
b[5].c(2 * (3 + -12), true || 12 < a).foo() < 5;


if (a < 10 || 9 >a ) {
if (c[5] && c[4]) {
while (b[0].c(5, false).foo() < a + 5) {
a = a * 5 - 1 / 2 * (5 - a * a);
}

if (true) {
a = a;
}
else  {
while (true) {
a =5;
}
}

if (a < 10 || 9 >a ) {
if (c[5] && c[4]) {
while (b[0].c(5, false).foo() < a + 5) {
a = a * 5 - 1 / 2 * (5 - a * a);
if (a < 10 || 9 >a ) {
if (c[5] && c[4]) {
while (b[0].c(5, false).foo() < a + 5) {
a = a * 5 - 1 / 2 * (5 - a * a);
if (true) { a = a; } else { while (true) { a =5; } }
}
}
if (a < 10 || 9 >a ) {
if (c[5] && c[4]) {
while (b[0].c(5, false).foo() < a + 5) {
a = a * 5 - 1 / 2 * (5 - a * a);
}

if (true) { a = a; } else { while (true) { a =5; } }
}
}
}
}
if (true) { a = a; } else { while (true) { a =5; } }
}
}
}
}
//a();

cout << i + 10;
cin >> a;
cin >> b[5].a;

}
